# Contatore da ZERO ad un byte che può essere
# ripristinato dalla or di due segnali di reset.
# Il risultato è codificato in modulo.
.model COUNTER

# Accetta due input: due bit di reset.
# Risponde con un byte rappresentante il conteggio.
.inputs  RST1 RST2
.outputs RES7 RES6 RES5 RES4 RES3 RES2 RES1 RES0

# Valori costanti.
.subckt ZERO RES=0
.subckt ONE  RES=1

# Per ripristinare il contatore è sufficiente che 
# arrivi almeno uno dei due segnali.
.subckt OR A=RST1 B=RST2 RES=RESET

# Quando sopraggiunge uno dei due segnali di reset,
# sceglie di propagare un byte di valore ZERO,
# altrimenti propaga il byte di risultato del sommatore.
.subckt MUX8 SEL=RESET A7=SUM7 A6=SUM6 A5=SUM5 A4=SUM4 A3=SUM3 A2=SUM2 A1=SUM1 A0=SUM0 B7=0 B6=0 B5=0 B4=0 B3=0 B2=0 B1=0 B0=0 OUT7=VAL7 OUT6=VAL6 OUT5=VAL5 OUT4=VAL4 OUT3=VAL3 OUT2=VAL2 OUT1=VAL1 OUT0=VAL0

# Questo registro memorizza l'ultimo byte che viene
# prodotto dal multiplexer. Tale byte viene mostrato
# in uscita nel ciclo di clock successivo.
.subckt REG8 A7=VAL7 A6=VAL6 A5=VAL5 A4=VAL4 A3=VAL3 A2=VAL2 A1=VAL1 A0=VAL0 MEM7=RES7 MEM6=RES6 MEM5=RES5 MEM4=RES4 MEM3=RES3 MEM2=RES2 MEM1=RES1 MEM0=RES0

# Il sommatore legge l'ultimo valore memorizzato dal
# registro e aggiunge un byte di valore UNO, per poi
# indirizzare il risultato al multiplexer.
.subckt SUM8 A7=RES7 A6=RES6 A5=RES5 A4=RES4 A3=RES3 A2=RES2 A1=RES1 A0=RES0 B7=0 B6=0 B5=0 B4=0 B3=0 B2=0 B1=0 B0=1 CIN=0 RES7=SUM7 RES6=SUM6 RES5=SUM5 RES4=SUM4 RES3=SUM3 RES2=SUM2 RES1=SUM1 RES0=SUM0 COUT=T

.end

# Ricerca dei modelli ZERO, ONE, OR, MUX8, REG8, SUM8.
.search zero.blif
.search one.blif
.search or.blif
.search mux8.blif
.search reg8.blif
.search sum8.blif
